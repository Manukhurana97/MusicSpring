package com.example.demo.Service;

import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;

import com.example.demo.Apicalling.SongsCalling;
import com.example.demo.Apicalling.UserCalling;
import com.example.demo.Incommingdata.SongInternalcall;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;

import com.example.demo.Controller.usercalldata;

@Service
public class Playlistservice {
	
	@Autowired
    public usercalldata usercalldata;

	@Autowired
	public SongsCalling songcalling;

	@Async
	public CompletableFuture<Map<String, String>> usercall_thread(String token) throws ExecutionException, InterruptedException {
		return  CompletableFuture.supplyAsync( () ->  usercalldata.usercall(token));
	}

	@Async
	public CompletableFuture<ResponseEntity<SongInternalcall>> song_calling(String token, int Songid)
	{
		return  CompletableFuture.supplyAsync(() -> songcalling.checksongs(token, Songid));
	}

	public Map.Entry<String, String> usercall(String token) throws ExecutionException, InterruptedException {
		CompletableFuture<Map<String, String>> map = usercall_thread(token);
		Map<String, String> user = map.get();
		return user.entrySet().iterator().next();
	}

	public SongInternalcall song_calling_Service(String token, int Songid) throws ExecutionException, InterruptedException {
		CompletableFuture<ResponseEntity<SongInternalcall>> C_F = song_calling(token, Songid);
		SongInternalcall data = C_F.get().getBody();
		assert data != null;
		 return data;
	}
}
